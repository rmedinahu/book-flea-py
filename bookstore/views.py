# -*- coding: utf-8 -*-from __future__ import unicode_literalsfrom django.shortcuts import renderfrom django.views.generic import TemplateView, DetailView, ListView, CreateView, UpdateViewfrom .models import Item, Category, ItemCategory, ItemRequest# Create your views here.from django.http import HttpResponse# Shane: use generics...class HomeView(TemplateView):    template_name='home.html'class ItemDetail(DetailView):	model=Item	template_name='item_detail.html'class ItemCategoryView(CreateView):	model = Category	template_name = 'item_category.html'	fields = ['name','description']class UpdateItemCategoryView(UpdateView):    model = Category    template_name = 'update_category.html'    fields = ['name', 'description']class UpdateBookView(UpdateView):    model = Item    template_name ='update.html'    fields = ['title', 'category', 'price', 'description', 'owner']class ItemCreateView(CreateView):    """ Show a page containing a form for adding a new Item object.    url pattern: /item/add name: item_add    """    model = Item    template_name = 'item_create.html'    fields = ['title', 'category', 'price', 'description', 'owner']class DetailItemCategoryView(DetailView):    model = ItemCategory    template_name = 'detail_item_category.html'    fields = ['item', 'category']class CategoryDetailView(DetailView):    model= Category    template_name='category_view.html'class CreateItemCategoryView(CreateView):    model = ItemCategory    template_name = 'createitem_category.html'    fields = ['item', 'category']class ItemRequestView(CreateView):    model = ItemRequest    template_name = 'itemrequestview.html'    fields = ['item', 'requestor', 'request_complete']class UpdateCategoryView(UpdateView):    model = Category    template_name = 'actually_update_category.html'    fields = ['name', 'description']class UpdateItemRequestView(UpdateView):    template_name = 'update_item_request.html'    model = ItemRequest    fields = ['item', 'requestor', 'request_complete']class DetailItemRequestView(DetailView):    model = ItemRequest    fields = ['item', 'requestor']    template_name = 'detail_item_request.html'class ItemListView(ListView):    model = Item    template_name = 'item_list_view.html'    def get_context_data(self, **kwargs):        context = super(ItemListView, self).get_context_data(**kwargs)        query_params = self.request.GET.get('sortby')        if query_params:            if query_params == 'title_asc':                context['object_list'] = Item.objects.all().order_by('title')            if query_params == 'title_desc':                context['object_list'] = Item.objects.all().order_by('-title')            if query_params == 'category_asc':                context['object_list'] = Item.objects.all().order_by('category')            if query_params == 'category_desc':                context['object_list'] = Item.objects.all().order_by('-category')            if query_params == 'price_low':                context['object_list'] = Item.objects.all().order_by('price')            if query_params == 'price_high':                context['object_list'] = Item.objects.all().order_by('-price')            if query_params == 'owner_asc':                context['object_list'] = Item.objects.all().order_by('owner')            if query_params == 'owner_desc':                context['object_list'] = Item.objects.all().order_by('-owner')        return context