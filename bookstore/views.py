# -*- coding: utf-8 -from __future__ import unicode_literalsfrom django.shortcuts import renderfrom django.views.generic import TemplateView, DetailView, ListView, CreateView, UpdateViewfrom .models import Item, Category, ItemCategory, ItemRequest# Create your views here.from django.http import HttpResponse# Shane: use generics...class ItemListView(ListView):    """ Show list of items in database.    url pattern: /items name: item_list    """    model = Item    template_name = 'item_list.html'    def get_context_data(self, **kwargs):        """ Override ListView method to set custom template variables.        """        # get the parent context list.        context = super(ItemListView, self).get_context_data(**kwargs)                # set custom template variables by adding or over writing         # variables in context list. E.g., only show meat types.        context['object_list'] = Item.objects.filter(category='book')        # make sure to return the variable list.        return contextclass HomeView(TemplateView):    template_name='home.html'class ItemDetail(DetailView):	model=Item	template_name='item_detail.html'class ItemCategoryView(CreateView):	model = Category	template_name = 'item_category.html'	fields = ['name','description']class UpdateItemCategoryView(UpdateView):    model = Category    template_name = 'update_category.html'    fields = ['name', 'description']class UpdateBookView(UpdateView):    model = Item    template_name ='update.html'    fields = ['title', 'category', 'price', 'description', 'owner']class ItemCreateView(CreateView):    """ Show a page containing a form for adding a new Item object.    url pattern: /item/add name: item_add    """    model = Item    template_name = 'item_create.html'    fields = ['title', 'category', 'price', 'description', 'owner']class DetailItemCategoryView(DetailView):    model = ItemCategory    template_name = 'detail_item_category.html'    fields = ['item', 'category']class CategoryDetailView(DetailView):    model= Category    template_name='category_view.html'class CreateItemCategoryView(CreateView):    model = ItemCategory    template_name = 'createitem_category.html'    fields = ['item', 'category']class ItemRequestView(CreateView):    model = ItemRequest    template_name = 'itemrequestview.html'    fields = ['item', 'requestor', 'request_complete']class UpdateCategoryView(UpdateView):    model = Category    template_name = 'actually_update_category.html'    fields = ['name', 'description']class UpdateItemRequestView(UpdateView):    template_name = 'update_item_request.html'    model = ItemRequest    fields = ['item', 'requestor', 'request_complete']class DetailItemRequestView(DetailView):    model = ItemRequest    fields = ['item', 'requestor']    template_name = 'detail_item_request.html'